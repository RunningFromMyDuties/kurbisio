on:
  push:
    branches:
      - master
      - refs/tags/*
      - direct_deploy
      - test_deploy/*
    tags:
      - "[0-9].[0-9]+.[0-9]+-[0-9]+"
  pull_request:

name: Build & Test & Deploy

jobs:
  test:
    # Uncomment to run on the omen
    runs-on: [self-hosted, Linux, native]
    container: golang
    # runs-on: ubuntu-18.04
    name: test build deploy

    services:
      postgres:
        image: postgres:12.2-alpine
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16

      - name: go lint
        run: |
          go install golang.org/x/lint/golint@latest
          golint -set_exit_status $(go list ./... | grep -v generated)

      - name: go test
        run: |
          go test ./core/... -race -count 1 -timeout 600s 
          go test ./iot/... -race -count 1 -timeout 600s
          go test ./services/... -race -count 1 -timeout 600s
        env:
          POSTGRES: "host=postgres port=5432 user=runner dbname=postgres sslmode=disable"
          POSTGRES_PASSWORD: "docker"

  build:
    runs-on: [self-hosted, docker, backend]
    name: build & deploy
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          cd services/fitness
          GOOS=linux GOARCH=amd64 go build

      - name: prep deploy to prod
        if: startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/direct_deploy'
        run: |
          echo "task='deployment to prod'" >> $GITHUB_ENV
          echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://api.twaiv.app" >> $GITHUB_ENV
          echo "CLOUDFORMATION_TEMPLATE=fitness-vpc-twaiv.yaml">> $GITHUB_ENV

      - name: prep deploy to staging
        if: github.ref == 'refs/heads/master'
        run: |
          echo "task='deployment to staging'" >> $GITHUB_ENV
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://staging.api.twaiv.app" >> $GITHUB_ENV
          echo "CLOUDFORMATION_TEMPLATE=fitness-vpc-twaiv.yaml">> $GITHUB_ENV

      - name: prep deploy to test
        if: startsWith(github.ref, 'refs/heads/test_deploy')
        run: |
          echo "task='deployment to test'" >> $GITHUB_ENV
          echo "DEPLOY_ENV=test" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://test.api.twaiv.app" >> $GITHUB_ENV
          echo "CLOUDFORMATION_TEMPLATE=fitness-vpc-twaiv.yaml">> $GITHUB_ENV

      - name: deploy
        run: |
          if [ -z "${DEPLOY_ENV}" ]; then
            echo "no environment to deploy to specified, hence skipping deployment"
            exit 0
          fi

          echo "deploy lambdas"
          FITNESS_DIR=$GITHUB_WORKSPACE/services/fitness
          cd $FITNESS_DIR/deployment_config
          ./sam-deploy-lambdas.sh \
            --template ${CLOUDFORMATION_TEMPLATE} \
            --gitSHA ${GITHUB_SHA::7} \
            --version ${GITHUB_REF##*/} \
            --env ${DEPLOY_ENV}

          echo "get login token"
          TOKEN=$(go run $FITNESS_DIR/tools/login/main.go -email loyalty.ci.bot@dalarub.com -password $LOYALTY_CI_BOT_PASSWORD)

          echo "waiting for ${DEPLOY_URL} to come online"
          SECONDS=0
          while ! curl -i -s --header "Authorization: $TOKEN" --request GET "${DEPLOY_URL}/kurbisio/health" | grep "HTTP/2 200"; do
            sleep 5
            echo "waiting for BE $URL since $SECONDS sec"
            if [ $SECONDS -gt 120 ];then
              echo "giving up"
              break
            fi
          done

          echo "upload help texts"
          cd $FITNESS_DIR/data/help_texts
          go run upsert.go -prune -url ${DEPLOY_URL} -token $TOKEN

          echo "upload chats"
          cd $FITNESS_DIR/data/chat
          go run upsert.go -prune -url ${DEPLOY_URL} -token $TOKEN
        shell: bash

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
          LOYALTY_CI_BOT_PASSWORD: ${{ secrets.LOYALTY_CI_BOT_PASSWORD }}

      - uses: 8398a7/action-slack@v3
        if: ( startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/master' ) && failure()
        with:
          status: custom
          fields: workflow,message
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW} - ${process.env.task} of '${process.env.AS_MESSAGE}' was a ${{ job.status }}`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
