on:
  push:
    branches:
      - master
      - refs/tags/*
      - direct_deploy
    tags:
      - "[0-9].[0-9]+.[0-9]+-[0-9]+"
  pull_request:

name: Build & Test & Deploy

jobs:
  test:
    runs-on: [self-hosted, Linux, native]
    container: golang
    name: test

    services:
      postgres:
        image: postgres:12.2-alpine
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2-beta
        with:
          go-version: ^1.15

      - name: go lint
        run: |
          go get -u golang.org/x/lint/golint 
          golint -set_exit_status $(go list ./... | grep -v generated)

      - name: go test race
        run: |
          go get -u github.com/atombender/go-jsonschema/cmd/gojsonschema
          go generate ./...
          go test ./... -race -count 1
        env:
          POSTGRES: "host=postgres port=5432 user=runner dbname=postgres sslmode=disable"
          POSTGRES_PASSWORD: "docker"

  build:
    runs-on: [self-hosted, docker, backend]
    name: build & deploy
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          go get -u github.com/atombender/go-jsonschema/cmd/gojsonschema
          go generate ./...
          cd services/fitness/data/conversation_templates && go run upload.go --validate-only
          cd -
          cd services/fitness
          GOOS=linux GOARCH=amd64 go build
      - name: deploy to prod
        if: startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/direct_deploy'
        run: |
          echo ::set-env name=task::'deployment to prod'
          cd services/fitness/deployment_config
          ./sam-deploy-lambdas.sh \
            --template fitness-pub.yaml \
            --gitSHA ${GITHUB_SHA::7} \
            --version ${GITHUB_REF##*/} \
            --env prod
          cd ../data/conversation_templates/
          go run upload.go --url https://api.loyalty2you.com
          cd -
          cd ../data/help_texts/
          go run upsert.go --url https://api.loyalty2you.com --resource help_text
          cd -
          cd ../data/chat/
          go run upsert.go --url https://api.loyalty2you.com
          cd -
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1

      - name: deploy to staging
        if: github.ref == 'refs/heads/master'
        run: |
          echo ::set-env name=task::'deployment to staging'
          cd services/fitness/deployment_config
          ./sam-deploy-lambdas.sh \
            --template fitness-pub.yaml \
            --gitSHA ${GITHUB_SHA::7} \
            --version ${GITHUB_REF##*/} \
            --env staging
          cd ../data/conversation_templates/
          go run upload.go --url https://staging.api.loyalty2you.com
          cd -
          cd ../data/help_texts/
          go run upsert.go --url https://staging.api.loyalty2you.com --resource help_text
          cd -
          cd ../data/chat/
          go run upsert.go --url https://staging.api.loyalty2you.com
          cd -
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1

      - uses: 8398a7/action-slack@v3
        if: ( startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/master' ) && failure()
        with:
          status: custom
          fields: workflow,message
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW} - ${process.env.task} of '${process.env.AS_MESSAGE}' was a ${{ job.status }}`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
